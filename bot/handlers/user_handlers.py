from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.data_bases.fsm import IdeaState, DescripState, CityState, FullNameState, NumberState
from bot.data_bases.order import db_order
from bot.handlers.db_handlers import BuyInstCF

from bot.keyboards.edit_kbs import get_data_kb
from bot.keyboards.user_kbs import start_kb, back_to_menu_kb, budget_kb, choise_kb, material_kb, choise_country_kb, \
    confirm_order_kb, russia_delivery_kb, examples_kb, ex_kb, auto_delete_kb, about_kb

from bot.config import bot, master_id, master_username

router = Router()

async def auto_delete_user(user_id, username):
    try:
        row = await db_order.get_order_row(user_id)
        if row[1] is not None:
            await db_order.delete_user(user_id)
            await bot.send_message(user_id,
                               f"{username}, –≤—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫, –ø–æ—ç—Ç–æ–º—É –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æüê•",
                               reply_markup=auto_delete_kb())
        else:
            pass
    except:
        pass

# Get start menu
@router.message(Command("start"))
async def cmd_start(msg: Message, state: FSMContext) -> None:
    await db_order.add_user_to_statistic(msg.from_user.id, msg.from_user.username, datetime.now())
    await state.clear()
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}!\n"
                                 f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –º–æ–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫üê£ –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–±–æ—Ç—ã –∏–∑ –Ω–∞–ª–∏—á–∏—è, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ç–∑—ã–≤—ãü§ç", reply_markup=start_kb())

# Start menu callbacks

@router.callback_query(F.data == "back_to_menu")
async def menu(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.delete_user(callback.from_user.id)
    await state.clear()
    await callback.message.answer(f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}!\n"
                                    f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –º–æ–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫üê£ –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–±–æ—Ç—ã –∏–∑ –Ω–∞–ª–∏—á–∏—è, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ç–∑—ã–≤—ãü§ç", reply_markup=start_kb())
    await callback.answer()

@router.callback_query(F.data == "back")
async def menu(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.delete()
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "order")
async def choise_prices(callback: CallbackQuery) -> None:
    scheduler = AsyncIOScheduler()
    scheduler.configure({'apscheduler.daemon': False})
    scheduler.start()
    scheduler.add_job(auto_delete_user, 'date', run_date=datetime.now() + timedelta(hours=24),
                      kwargs={'user_id': callback.from_user.id, 'username': callback.from_user.full_name})

    await db_order.create_order_table()
    await db_order.add_user_to_db(callback.from_user.id)
    await callback.message.answer("–ö–∞–∫–æ–π –≤–∞—à –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç?", reply_markup=budget_kb())
    await callback.answer()

@router.callback_query(F.data == "examples")
async def examples(callback: CallbackQuery) -> None:
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", reply_markup=examples_kb())
    await callback.answer()

@router.callback_query(F.data == "about")
async def about(callback: CallbackQuery) -> None:
    await callback.message.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–¥–∞, –º–Ω–µ 21 –≥–æ–¥, —É—á—É—Å—å –Ω–∞ ‚ú®—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –∂–∏–≤–æ–ø–∏—Å–∏ ‚ú® –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ\n\n"
                                  "–†–æ—Å–ø–∏—Å—å –≤–µ—â–µ–π –ø—Ä–∏—à–ª–∞ –≤ –º–æ—é –∂–∏–∑–Ω—å —Å –ª–µ—Ç–∞ 2022–≥. –ê –≤–æ—Ç —Ä–∏—Å—É—é —è —Å–∫–æ–ª—å–∫–æ —Å–µ–±—è –ø–æ–º–Ω—é,"
                                  " –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É—é —Å–µ–±—è  –∏ –∫–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫, –∏ –∫–∞–∫ –∫–∞—Å—Ç–æ–º–∞–π–∑–µ—Äüåõ\n"
                                  "<i>–ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–æ–ø–ª–æ—â–∞—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏, –∏ –¥–∞—Ä–∏—Ç—å –ª—é–¥—è–º —Ä–∞–¥–æ—Å—Ç—å –≤ –æ–±—ã—á–Ω—ã—Ö –≤–µ—â–∞—Ö</i> ‚òÄ\n\n"
                                  "–¢–∞–∫–∂–µ —è –≤–µ–¥—É –¢–∏–∫–¢–æ–∫ (divoroom) –Ω–∞ 175—Ç—ã—Å.+ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!\n\n"
                                  "–ï—Å–ª–∏ –≤—ã –∏–∑ –ü–∏—Ç–µ—Ä–∞, —Ç–æ –ø—Ä–∏–µ—Ö–∞—Ç—å –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –ª–∏—á–Ω–æü§≤\n\n"
                                  "<i>–ú–Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –º–æ–π –º–∞–≥–∞–∑–∏–Ω—á–∏–∫, –∏ –Ω–∞–¥–µ—é—Å—å –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –µ—â–µ –∏ –µ—â–µ</i> üíì", reply_markup=about_kb())
    await callback.answer()

# Examples

@router.callback_query(F.data == "shoppers_ex")
async def shoppers_example(callback: CallbackQuery) -> None:
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä—ã —à–æ–ø–ø–µ—Ä–æ–≤‚ú®\n"
                                  "–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ—Ç 3.5 —Ç—ã—Å. —Ä—É–±.*\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=ex_kb())
    await callback.answer()

@router.callback_query(F.data == "tshirts_ex")
async def tshirts_example(callback: CallbackQuery) -> None:
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä—ã —Ñ—É—Ç–±–æ–ª–æ–∫‚ú®\n"
                                  "–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ—Ç 4 —Ç—ã—Å. —Ä—É–±.*\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=ex_kb())
    await callback.answer()

@router.callback_query(F.data == "hoodies_sweat_ex")
async def hoodies_example(callback: CallbackQuery) -> None:
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä—ã —Ö—É–¥–∏ –∏ —Å–≤–∏—Ç—à–æ—Ç–æ–≤‚ú®\n"
                                  "–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ—Ç 5 —Ç—ã—Å. —Ä—É–±.*\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=ex_kb())
    await callback.answer()

@router.callback_query(F.data == "pictures_ex")
async def pictures_example(callback: CallbackQuery) -> None:
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ä—Ç–∏–Ω‚ú®\n"
                                  "–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –æ—Ç 4 —Ç—ã—Å. —Ä—É–±.*\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=ex_kb())
    await callback.answer()

@router.callback_query(F.data == "badges_ex")
async def pictures_example(callback: CallbackQuery) -> None:
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–∫–æ–≤‚ú®\n"
                                  "–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã 1.5 —Ç—ã—Å. —Ä—É–±.*\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=ex_kb())
    await callback.answer()
    
@router.callback_query(F.data == "other_cat")
async def other_cat(callback: CallbackQuery) -> None:
    await callback.message.edit_reply_markup(reply_markup=examples_kb())
    await callback.answer()

# Prices

@router.callback_query(F.data == "sum_13")
async def price_13(callback: CallbackQuery) -> None:
    await db_order.add_budget_db(callback.from_user.id, "1.5 - 3.5 —Ç—ã—Å. —Ä—É–±.")
    await callback.message.answer("<b>1.5 - 3.5 —Ç—ã—Å. —Ä—É–±.*</b>\n\n"
                                  "‚ú®–ª—é–±—ã–µ –∑–Ω–∞—á–∫–∏ 1.5 —Ç—ã—Å.\n"
                                  "‚ú®—à–æ–ø–ø–µ—Ä—ã —Å –Ω–∞–¥–ø–∏—Å—è–º–∏/–º–∞–ª–µ–Ω—å–∫–∏–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ 2 - 3.5 —Ç—ã—Å.\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=choise_kb())
    await callback.answer()

@router.callback_query(F.data == "sum_35")
async def price_35(callback: CallbackQuery) -> None:
    await db_order.add_budget_db(callback.from_user.id, "3.5 - 5 —Ç—ã—Å. —Ä—É–±.")
    await callback.message.answer("<b>3.5 - 5 —Ç—ã—Å. —Ä—É–±.*</b>\n\n"
                                  "‚ú®—à–æ–ø–ø–µ—Ä—ã —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö(–æ–¥–Ω–æ–≥–æ), –±–µ–∑ —Ñ–æ–Ω–∞, –æ—Ç 3.5 —Ç—ã—Å\n"
                                  "‚ú®—à–æ–ø–ø–µ—Ä—ã —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö(2 –∏ –±–æ–ª—å—à–µ), –±–µ–∑ —Ñ–æ–Ω–∞, –æ—Ç 4 —Ç—ã—Å \n"
                                  "‚ú®—à–æ–ø–ø–µ—Ä—ã —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ —Å —Ñ–æ–Ω–æ–º, –æ—Ç 4 —Ç—ã—Å\n"
                                  "‚ú®—Ñ—É—Ç–±–æ–ª–∫–∏ —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ 1-2 –∂–∏–≤–æ—Ç–Ω—ã—Ö, ~5 —Ç—ã—Å\n"
                                  "‚ú®–∫–∞—Ä—Ç–∏–Ω—ã —Ä–∞–∑–º–µ—Ä–æ–º ~20—Ö20 —Å–º, —Å –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º\n\n"
                                  "üê•–≤—Å–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Ç–µ–º–∞—Ç–∏–∫—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ "
                                  "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ —Å–≤–æ–µ–º—É –±—é–¥–∂–µ—Ç—É(—Ç–∞–∫–∂–µ —Å–º. —Ä–∞–∑–¥–µ–ª ¬´–æ—Ç 5—Ç—ã—Å.¬ª)\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=choise_kb())
    await callback.answer()

@router.callback_query(F.data == "sum_5")
async def price_5(callback: CallbackQuery) -> None:
    await db_order.add_budget_db(callback.from_user.id, "–æ—Ç 5 —Ç—ã—Å. —Ä—É–±.")
    await callback.message.answer("<b>–æ—Ç 5 —Ç—ã—Å. —Ä—É–±.*</b>\n\n"
                                  "‚ú®—Ä–æ—Å–ø–∏—Å–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ª—é–¥–µ–π –Ω–∞ –ª—é–±–æ–º –∏–∑–¥–µ–ª–∏–∏\n"
                                  "‚ú®—à–æ–ø–ø–µ—Ä—ã —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏\n"
                                  "‚ú®—Ñ—É—Ç–±–æ–ª–∫–∏ —Å –±–æ–ª—å—à–∏–º–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏/—Å–ª–æ–∂–Ω–æ–π –∏–¥–µ–µ–π/–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º\n"
                                  "‚ú®—Ö—É–¥–∏ –∏ —Å–≤–∏—Ç—à–æ—Ç—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –æ—Ç 5 —Ç—ã—Å. / —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –æ—Ç 6.5 —Ç—ã—Å.\n"
                                  "‚ú®–∫–∞—Ä—Ç–∏–Ω—ã —Ä–∞–∑–º–µ—Ä–æ–º –æ—Ç 30 —Å–º\n\n"
                                  "* –∏–∑–¥–µ–ª–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=choise_kb())
    await callback.answer()

@router.callback_query(F.data == "yes")
async def confirm_price(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(IdeaState.idea)
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏–¥–µ—é –≤–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏", reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "other_prices")
async def other_prices(callback: CallbackQuery) -> None:
    await callback.message.edit_reply_markup(reply_markup=budget_kb())
    await callback.answer()

# Material

@router.callback_query(F.data == "shopper")
async def material_shopper(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_material_db(callback.from_user.id, "–®–æ–ø–ø–µ—Ä")
    await state.set_state(DescripState.description)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ã—á–Ω—ã–π –∏–ª–∏ –Ω–∞ –º–æ–ª–Ω–∏–∏, –∏ –∂–µ–ª–∞–µ–º—ã–π —Ü–≤–µ—Ç –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ üå∏", reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "tshirt")
async def material_tshirt(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_material_db(callback.from_user.id, "–§—É—Ç–±–æ–ª–∫–∞")
    await state.set_state(DescripState.description)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ –º—É–∂—Å–∫–æ–µ/–∂–µ–Ω—Å–∫–æ–µ, —Ü–≤–µ—Ç(–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏ —Ä–∞–∑–º–µ—Ä. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ, —è –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –ª–∏—á–Ω–æ ‚òÄ", reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "hoodie")
async def material_hoodie(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_material_db(callback.from_user.id, "–•—É–¥–∏")
    await state.set_state(DescripState.description)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ –º—É–∂—Å–∫–æ–µ/–∂–µ–Ω—Å–∫–æ–µ, —Ü–≤–µ—Ç(–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏ —Ä–∞–∑–º–µ—Ä. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ, —è –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –ª–∏—á–Ω–æ ‚òÄ", reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "sweatshirt")
async def material_sweatshirt(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_material_db(callback.from_user.id, "–°–≤–∏—Ç—à–æ—Ç")
    await state.set_state(DescripState.description)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ –º—É–∂—Å–∫–æ–µ/–∂–µ–Ω—Å–∫–æ–µ, —Ü–≤–µ—Ç(–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏ —Ä–∞–∑–º–µ—Ä. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ, —è –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –ª–∏—á–Ω–æ ‚òÄ", reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "picture")
async def material_picture(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_material_db(callback.from_user.id, "–ö–∞—Ä—Ç–∏–Ω–∞")
    await state.set_state(DescripState.description)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω—ã. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ, —è –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –ª–∏—á–Ω–æ üå∏", reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "badge")
async def material_badge(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_material_db(callback.from_user.id, "–ó–Ω–∞—á–æ–∫")
    await state.set_state(DescripState.description)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–∫–∏–º –ª–∞–∫–æ–º –ø–æ–∫—Ä—ã–≤–∞—Ç—å –∑–Ω–∞—á–æ–∫:\n"
                                        "<b>–≥–ª—è–Ω—Ü–µ–≤—ã–º</b> (—Ü–≤–µ—Ç–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —è—Ä—á–µ, –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –æ—Ç—Ä–∞–∂–∞—é—â–µ–π)\n"
                                        "<b>–º–∞—Ç–æ–≤—ã–º</b> (–≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –∑–∞—â–∏—Ç–Ω—ã–π —Å–ª–æ–π)\n"
                                        "–ª–∏–±–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ –ø–æ–∫–∞ <b>–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å</b>",
                                        reply_markup=back_to_menu_kb())
    await callback.answer()

# Country

@router.callback_query(F.data == "russia")
async def russia(callback: CallbackQuery) -> None:
    await db_order.add_country_db(callback.from_user.id, "–†–æ—Å—Å–∏—è")
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=russia_delivery_kb())
    await callback.answer()

@router.callback_query(F.data == "spb")
async def russia(callback: CallbackQuery) -> None:
    await db_order.add_city_db(callback.from_user.id, "–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞")
    row = await db_order.get_order_row(callback.from_user.id)
    if row[11] is not None:
        await callback.message.answer(f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä</b>\n"
                                      f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[11]}\n"
                                      f"–¶–µ–Ω–∞: {row[2]}\n"
                                      f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {row[8]}\n", reply_markup=confirm_order_kb())
    else:
        await callback.message.answer(f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>\n"
                                        f"–ë—é–¥–∂–µ—Ç: {row[2]}\n"
                                        f"–ò–¥–µ—è: {row[3]}\n"
                                        f"–¢–∏–ø –∏–∑–¥–µ–ª–∏—è: {row[4]}\n"
                                        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–¥–µ–ª–∏—è: {row[5]}\n"
                                        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {row[8]}\n", reply_markup=confirm_order_kb())
    await callback.answer()

@router.callback_query(F.data == "russia_delivery")
async def russia(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_delivery_db(callback.from_user.id, "200 - 400 —Ä—É–±.")
    await state.set_state(CityState.city)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  "–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∏–Ω–¥–µ–∫—Å\n\n"
                                  "*–æ—Ç–ø—Ä–∞–≤–ª—è—é –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 200-400—Ä", reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "belarus")
async def belarus(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_country_db(callback.from_user.id, "–ë–µ–ª–∞—Ä—É—Å—å")
    await db_order.add_delivery_db(callback.from_user.id, "–æ—Ç 600 —Ä—É–±.")
    await state.set_state(CityState.city)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  "–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∏–Ω–¥–µ–∫—Å\n\n"
                                  "*–æ—Ç–ø—Ä–∞–≤–ª—è—é –°–¥—ç–∫–æ–º –∏–ª–∏ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 600—Ä",
                                  reply_markup=back_to_menu_kb())
    await callback.answer()

@router.callback_query(F.data == "kz")
async def kz(callback: CallbackQuery, state: FSMContext) -> None:
    await db_order.add_country_db(callback.from_user.id, "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
    await db_order.add_delivery_db(callback.from_user.id, "–æ—Ç 600 —Ä—É–±.")
    await state.set_state(CityState.city)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  "–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∏–Ω–¥–µ–∫—Å\n\n"
                                  "*–æ—Ç–ø—Ä–∞–≤–ª—è—é –°–¥—ç–∫–æ–º –∏–ª–∏ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç 600—Ä",
                                  reply_markup=back_to_menu_kb())
    await callback.answer()

# In stock
@router.callback_query(BuyInstCF.filter())
async def buy_inst(callback: CallbackQuery, callback_data: BuyInstCF) -> None:
    scheduler = AsyncIOScheduler()
    scheduler.configure({'apscheduler.daemon': False})
    scheduler.start()
    scheduler.add_job(auto_delete_user, 'date', run_date=datetime.now() + timedelta(hours=24),
                      kwargs={'user_id': callback.from_user.id, 'username': callback.from_user.full_name})

    await db_order.create_order_table()
    await db_order.add_user_to_db(callback.from_user.id)
    await db_order.add_instock_db(callback.from_user.id, callback_data.name)
    await db_order.add_budget_db(callback.from_user.id, f"{callback_data.price} —Ä—É–±.")
    await callback.message.answer("–í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?\n\n"
                     "*–≤ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
                     reply_markup=choise_country_kb())
    await callback.answer()

# States

@router.message(IdeaState.idea)
async def user_idea(msg: Message, state: FSMContext) -> None:
    await db_order.add_idea_db(msg.from_user.id, msg.text)
    await state.clear()
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ", reply_markup=material_kb())

@router.message(IdeaState.edit)
async def user_idea(msg: Message, state: FSMContext) -> None:
    await db_order.add_idea_db(msg.from_user.id, msg.text)
    await state.clear()
    await msg.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=get_data_kb())

@router.message(DescripState.description)
async def user_desc(msg: Message, state: FSMContext) -> None:
    await db_order.add_description_db(msg.from_user.id, msg.text)
    await state.clear()
    await msg.answer("–í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?\n\n"
                                  "*–≤ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞", reply_markup=choise_country_kb())

@router.message(DescripState.edit)
async def user_desc(msg: Message, state: FSMContext) -> None:
    await db_order.add_description_db(msg.from_user.id, msg.text)
    await state.clear()
    await msg.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=get_data_kb())

@router.message(CityState.city)
async def user_city(msg: Message, state: FSMContext) -> None:
    await db_order.add_city_db(msg.from_user.id, msg.text)
    await state.clear()
    await state.set_state(FullNameState.full_name)
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ", reply_markup=back_to_menu_kb())

@router.message(CityState.edit)
async def user_city(msg: Message, state: FSMContext) -> None:
    await db_order.add_city_db(msg.from_user.id, msg.text)
    await state.clear()
    await msg.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=get_data_kb())

@router.message(FullNameState.full_name)
async def user_fullname(msg: Message, state: FSMContext) -> None:
    await db_order.add_full_name_db(msg.from_user.id, msg.text)
    await state.clear()
    await state.set_state(NumberState.number)
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=back_to_menu_kb())

@router.message(FullNameState.edit)
async def user_fullname(msg: Message, state: FSMContext) -> None:
    await db_order.add_full_name_db(msg.from_user.id, msg.text)
    await state.clear()
    await msg.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=get_data_kb())

@router.message(NumberState.number)
async def user_number(msg: Message, state: FSMContext) -> None:
    await db_order.add_number_db(msg.from_user.id, msg.text)
    await state.clear()
    row = await db_order.get_order_row(msg.from_user.id)
    if row[11] is not None:
        await msg.answer(f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä</b>\n"
                                      f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[11]}\n"
                                      f"–¶–µ–Ω–∞: {row[2]}\n\n"
                         f"<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n"
                                        f"–§–ò–û: {row[6]}\n"
                                        f"–ê–¥—Ä–µ—Å: {row[7]}, {row[8]}\n"
                                        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {row[10]}\n"
                                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {row[9]}", reply_markup=confirm_order_kb())
    else:
        await msg.answer(f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>\n"
                                        f"–ë—é–¥–∂–µ—Ç: {row[2]}\n"
                                        f"–ò–¥–µ—è: {row[3]}\n"
                                        f"–¢–∏–ø –∏–∑–¥–µ–ª–∏—è: {row[4]}\n"
                                        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–¥–µ–ª–∏—è: {row[5]}\n\n"
                                        f"<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n"
                                        f"–§–ò–û: {row[6]}\n"
                                        f"–ê–¥—Ä–µ—Å: {row[7]}, {row[8]}\n"
                                        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {row[10]}\n"
                                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {row[9]}", reply_markup=confirm_order_kb())

@router.message(NumberState.edit)
async def user_fullname(msg: Message, state: FSMContext) -> None:
    await db_order.add_number_db(msg.from_user.id, msg.text)
    await state.clear()
    await msg.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=get_data_kb())

# Send order
@router.callback_query(F.data == "send_order")
async def send_order(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ, {callback.from_user.full_name}!\n"
                                  f"–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—Éü´∂ –°–∫–æ—Ä–æ —è —Å–≤—è–∂—É—Å—å —Å –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ‚òÄ", reply_markup=back_to_menu_kb())
    row = await db_order.get_order_row(callback.from_user.id)
    if callback.from_user.username:
        if row[6] is None and row[11] is None:
            await bot.send_message(master_id, f"<b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n"
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                              f"–ë—é–¥–∂–µ—Ç: {row[2]}\n"
                                              f"–ò–¥–µ—è: {row[3]}\n"
                                              f"–¢–∏–ø –∏–∑–¥–µ–ª–∏—è: {row[4]}\n"
                                              f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–¥–µ–ª–∏—è: {row[5]}\n"
                                              f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {row[8]}\n"
                                              f"–°—Å—ã–ª–∫–∞: https://t.me/{callback.from_user.username}")
        elif row[11] is not None and row[6] is None:
            await bot.send_message(master_id, f"<b>–£ –í–ê–° –ö–£–ü–ò–õ–ò –¢–û–í–ê–† –í –ù–ê–õ–ò–ß–ò–ò</b>\n"
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                              f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[11]}\n"
                                              f"–¶–µ–Ω–∞: {row[2]}\n"
                                              f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {row[8]}\n"
                                              f"–°—Å—ã–ª–∫–∞: https://t.me/{callback.from_user.username}")
        elif row[11] is None and row[6] is not None:
            await bot.send_message(master_id, f"<b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n"
                                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                        f"–ë—é–¥–∂–µ—Ç: {row[2]}\n"
                                        f"–ò–¥–µ—è: {row[3]}\n"
                                        f"–¢–∏–ø –∏–∑–¥–µ–ª–∏—è: {row[4]}\n"
                                        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–¥–µ–ª–∏—è: {row[5]}\n"
                                        f"–§–ò–û: {row[6]}\n"
                                        f"–ê–¥—Ä–µ—Å: {row[7]}, {row[8]}\n"
                                        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {row[10]}\n"
                                        f"–°—Å—ã–ª–∫–∞: https://t.me/{callback.from_user.username}")
        else:
            await bot.send_message(master_id, f"<b>–£ –í–ê–° –ö–£–ü–ò–õ–ò –¢–û–í–ê–† –í –ù–ê–õ–ò–ß–ò–ò</b>\n"
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                              f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[11]}\n"
                                              f"–¶–µ–Ω–∞: {row[2]}\n"
                                              f"–§–ò–û: {row[6]}\n"
                                              f"–ê–¥—Ä–µ—Å: {row[7]}, {row[8]}\n"
                                              f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {row[10]}\n"
                                              f"–°—Å—ã–ª–∫–∞: https://t.me/{callback.from_user.username}")
    elif not callback.from_user.username:
        if row[6] is None and row[11] is None:
            await bot.send_message(master_id, f"<b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n"
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                              f"–ë—é–¥–∂–µ—Ç: {row[2]}\n"
                                              f"–ò–¥–µ—è: {row[3]}\n"
                                              f"–¢–∏–ø –∏–∑–¥–µ–ª–∏—è: {row[4]}\n"
                                              f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–¥–µ–ª–∏—è: {row[5]}\n"
                                              f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {row[8]}\n"
                                              f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, <b>–∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>")
        elif row[11] is not None:
            await bot.send_message(master_id, f"<b>–£ –í–ê–° –ö–£–ü–ò–õ–ò –¢–û–í–ê–† –í –ù–ê–õ–ò–ß–ò–ò</b>\n"
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                              f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[11]}\n"
                                              f"–¶–µ–Ω–∞: {row[2]}\n"
                                              f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, <b>–∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>")
        elif row[11] is None and row[6] is not None:
            await bot.send_message(master_id, f"<b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n"
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                              f"–ë—é–¥–∂–µ—Ç: {row[2]}\n"
                                              f"–ò–¥–µ—è: {row[3]}\n"
                                              f"–¢–∏–ø –∏–∑–¥–µ–ª–∏—è: {row[4]}\n"
                                              f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–¥–µ–ª–∏—è: {row[5]}\n"
                                              f"–§–ò–û: {row[6]}\n"
                                              f"–ê–¥—Ä–µ—Å: {row[7]}, {row[8]}\n"
                                              f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {row[10]}\n"
                                              f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, <b>–∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>")
        else:
            await bot.send_message(master_id, f"<b>–£ –í–ê–° –ö–£–ü–ò–õ–ò –¢–û–í–ê–† –í –ù–ê–õ–ò–ß–ò–ò</b>\n"
                                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                                              f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row[11]}\n"
                                              f"–¶–µ–Ω–∞: {row[2]}\n"
                                              f"–§–ò–û: {row[6]}\n"
                                              f"–ê–¥—Ä–µ—Å: {row[7]}, {row[8]}\n"
                                              f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {row[10]}\n"
                                              f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, <b>–∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>")
        await callback.message.answer(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {callback.from_user.full_name}! –ü–æ–ª—É—á–∏–ª–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, –Ω–æ, –∫–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ —è –Ω–µ –º–æ–≥—É —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n"
                         f"–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {master_username}\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!")
    await state.clear()
    await db_order.delete_user(callback.from_user.id)
    await callback.answer()

@router.message(F.text)
async def smthing_text(msg: Message) -> None:
    await msg.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :( –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=back_to_menu_kb())


@router.message(F.photo)
async def admin_photo(msg: Message) -> None:
    if msg.from_user.id == 317325310:
        await msg.answer(msg.photo[-1].file_id)
    else:
        pass
